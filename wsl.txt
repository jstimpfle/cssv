Whitespace separated literals (WSL)
===================================

WSL is a human and programmer friendly text serialization format for
relational databases. Here is an example of a Databases notated as WSL:

% DOMAIN Person Atom
% DOMAIN PersonDesc String
% DOMAIN Gender Enum male female

% TABLE Person Person Gender PersonDesc
% TABLE Friends Person Person
% TABLE Couple Person Person

Person Jack male "Jack of all Trades"
Person John male "John Doe"
Person Jane female "Jane Dane"
Friends Jack Jane
Couple John Jane

WSL emphasizes normalization and the practical properties of plain text;
in particular ease of editing and version-controlling. Storage-wise, it
aims to offer canonical data representations. Modelling-wise, NULL
values and column names are omitted from its conception of the
relational model to encourage tables with fewer columns and better
semantics.

SYNTAX
======

A convenient way to represent Unicode is needed for practical reasons.
WSL databases must be UTF-8 encoded; no other encodings are supported.
http://utf8everywhere.org gives many good reasons for UTF-8 only. The
most important benefit is that syntactical specification needs only be
concerned with ASCII-range bytes.

A WSL database is normally embedded in a single file or stream of bytes.
The control character bytes 0x00-0x1f, 0x7f are forbidden, with the
exception of 0x0a (newline) which is used as lexical separator. In
particular, 0x09 (tab) and 0x0d (cr) are not supported.

The stream consists of a header followed by the relational data. The
header holds the database schema. Each non-empty line of the header must
be prefixed with a '%' (0x25) character. The schema language is
discussed later.

After the header, each row of the data is given on a single line
(extinct of newline characters) as a sequence of tokens which are
separated by exactly one space (0x20) character.

The first such token is always the name of the table to which the row
belongs.

The remaining tokens are the values of the row (in order corresponding
to the columns of the table). Each token is encoded as an *atom* or as a
*string*, according to its column's syntactic type, which may be of
either atom or string type.

An atom is simply a sequence of allowed bytes except whitespace, i.e.
0x21-0x7e, 0x80-0xff. Note that it's actually a little more restricted
than that due to the fact that the file has to be a valid UTF-8 stream.
Also, it's a bad idea to use for example Unicode whitespace characters
other than U+0020 (space); but due to the complexities of Unicode this
can't be avoided by design.

Atoms are useful for numbers and identifiers, and often serve as keys in
relations. But they can be used for almost anything which does not
contain space characters. For example, URLs, dates, times...

A string literal starts with a double quote (0x22) character and ends at
the first following unescaped double quote character. By means of
escaping string literals can represent arbitrary data (and so they are
meant for accompanying data like comments). Escaping is C-style: the
backslash character introduces an escape sequence. The following escape
sequences and interpretations as (binary) data are possible:

Escape sequence | Interpretation
--------------------------------
\t              | horizontal tab (0x09)
\n              | newline (0x0a)
\r              | carriage return (0x0d)
\"              | double quote (0x22)
\\              | backslash (0x5c)
\xHH            | Byte in (lower case) hexadecimal notation

Hexadecimal notation is required for the representation of ASCII control
characters other than \t, \n and \r. In the interest of normalization it
is discouraged otherwise.

DATABASE SCHEMA LANGUAGE
========================

The schema language supports declaration of user-defined domains (column
data types), base tables (row data types), and database integrity
constraints (primary and foreign keys). These are the most essential
ingredients to relational databases. The following is a more elaborate
example of a schema in WSL. The lines are prefixed with '%' as required
for database inline notation.

% SCHEMA NAME example-schema
% SCHEMA VERSION 1
%
% DOC SCHEMA no documentation today
%
% DOC DOMAIN Person registered person
% DOC DOMAIN Gender gender of a person
% DOC DOMAIN Comment free-form comment
%
% DOC TABLE Person This table is meant to store all persons
% DOC TABLE Friends
% DOC TABLE Couple
%
% DOMAIN User Atom
% DOMAIN Gender Enum male female
% DOMAIN Comment String
%
% TABLE Person User Gender Comment
% TABLE Couple User User
% TABLE Friends User User
%
% KEY Person P *
% REFERENCE Friends P * => Person P *
% REFERENCE Friends * P => Person P *
% REFERENCE Couple P * => Person P *
% REFERENCE Couple * P => Person P *

Explanation of this language follows.

LEXICAL SYNTAX OF THE SCHEMA LANGUAGE
-------------------------------------

The lexical syntax of the schema language is designed to be very easy
easy to parse. Each schema is encoded as a sequence of statements, where
each statement stands on its own line and consists of a list of tokens
separated strictly by whitespace. There are some documentation
statements which have free-form text arguments, but it should be ok to
consider the amount of whitespace there as insignificant, too.

That means parsers can just start by splitting into lines on newline
characters, and each line into words on whitespace characters.

In inline database notation, each line must start with a '%' character
but this is not part of the schema syntax.

DECLARATION OF DOMAINS
----------------------

A DOMAIN line declares a new domain. The new domain's values will
usually be interpreted as distinct from all other domains' values.

The first following token is the name of the new domain. It must match
the regular expression [a-zA-Z][a-zA-Z0-9]*.

The next token is the name of a basic datatype. Basic datatypes specify
how values of a domain are represented internally, and externally within
the syntactic constraints for atoms and string literals. Furthermore
each basic datatype defines a total ordering on all its values.

There might be additional tokens following. For example, to make an
"Enum" datatype one more token for each valid value is needed.

The following datatypes must be built in to every implementation:

 - Atom (Atom syntax)
 - String (String literal syntax, UTF8 encoded text)
 - Enum (Atom syntax, fixed set of valid values)
 - Integer (Atom syntax, representation in base 10)

Other useful types:

 - Decimal (Atom syntax, Configurable number of decimal places)
 - Base64 (Atom syntax, base64-encoded binary data)
 - Hex (Atom syntax, hex-encoded binary data)

DOMAIN CONSTRAINTS
------------------

A facility to constrain the values in a domain (to use a subset of the
values allowed by the basic datatypes) would be nice, but it's not clear
how this should be realized.

The idea is that such constraints can be specified separatedly to the
declaration of each domain, and possibly on the external (instead of
only internal) representation. This allows specialized syntax for
fine-grained constraints that can be enforced by specialized tools.

UNIQUE KEY CONSTRAINTS
----------------------

A unique key constraint is declared by a line starting with KEY. After
the KEY token, the name of a table and one more token for each column in
the table are expected. Each column token should be either "*" or an
uppercase identifier. All identifiers in a unique key declaration line
must be distinct. The interpretation is that those columns which are
paired with identifiers (i.e. not "*") form the unique key. For example,

KEY Person P * *

specifies that the Person table (which has three columns) is unique in
the first column, i.e. for a given value there is at most one Person row
which has that value in the first column.

FOREIGN KEY CONSTRAINTS
-----------------------

A foreign key constraint is declared by a line starting with the token
REFERENCE. After the REFERENCE token, two table-column token sequences,
as described in the UNIQUE KEY section, are expected. The two sequences
must be separated by a => token. The identifiers must be distinct per
sequence, and the same must be used in both sequences. For example,

REFERENCE Friends P * => Person P * *
REFERENCE Friends * P => Person P * *

declares one foreign key constraint from table Friends (first column) to
Person (first column), and one foreign key constraint from Friends
(second column) to Person (first column).

REFERENCE Perm D R * * => Repo D R *

declares a multi-column foreign key constraint from Perm to Repo.
